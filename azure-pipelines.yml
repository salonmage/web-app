trigger:
- master
- develop

pool:
  vmImage: 'ubuntu-latest'

variables:
  serviceName: 'webapp'
  imageRepo: '$(REGISTRY_ORGANIZATION)/$(serviceName)'

steps:
- script: |
    echo "##vso[task.setvariable variable=shortCommitId]$(git rev-parse --short HEAD)"
  displayName: 'Short commit ID'

- script: |
    echo "##vso[task.setvariable variable=imageTag]prod-$(shortCommitId)"
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
  displayName: 'Image Tag for Production'

- script: |
    echo "##vso[task.setvariable variable=imageTag]stag-$(shortCommitId)"
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/develop'))
  displayName: 'Image Tag for Staging'

- bash: |
    docker build \
    -f $(system.defaultWorkingDirectory)/Dockerfile \
    -t $(imageRepo):$(imageTag) \
    $(system.defaultWorkingDirectory)
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
  displayName: 'Docker build'

- bash: |
    docker build \
    -f $(system.defaultWorkingDirectory)/Dockerfile.develop \
    -t $(imageRepo):$(imageTag) \
    $(system.defaultWorkingDirectory)
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/develop'))
  displayName: 'Docker build'

- bash: docker login -u $(REGISTRY_LOGIN) -p $(REGISTRY_PASSWORD)
  condition: succeeded()
  displayName: 'Docker login'

- bash: docker push $(imageRepo):$(imageTag)
  condition: succeeded()
  displayName: 'Docker push'

- task: HelmInstaller@0
  inputs:
    helmVersion: 2.14.1
  condition: succeeded()
  displayName: 'Install helm'

- bash: helm package --version $(build.buildId) --destination $(build.artifactStagingDirectory) $(system.defaultWorkingDirectory)/charts/$(serviceName)
  condition: succeeded()
  displayName: 'Helm package'

- task: HelmDeploy@0
  inputs:
    connectionType: 'Kubernetes Service Connection'
    kubernetesServiceConnection: 'my-k8s'
    namespace: 'default'
    command: 'upgrade'
    chartType: 'FilePath'
    releaseName: '$(serviceName)-prod'
    chartPath: '$(Build.ArtifactStagingDirectory)/$(serviceName)-$(build.buildId).tgz'
    overrideValues: image="$(imageRepo):$(imageTag)",ingress.domain="$(PRODUCTION_DOMAIN)"
    install: true
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
  displayName: 'Helm update on Production'

- task: HelmDeploy@0
  inputs:
    connectionType: 'Kubernetes Service Connection'
    kubernetesServiceConnection: 'my-k8s'
    namespace: 'default'
    command: 'upgrade'
    chartType: 'FilePath'
    releaseName: '$(serviceName)-stag'
    chartPath: '$(Build.ArtifactStagingDirectory)/$(serviceName)-$(build.buildId).tgz'
    overrideValues: image="$(imageRepo):$(imageTag)",ingress.domain="$(STAGING_DOMAIN)"
    install: true
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/develop'))
  displayName: 'Helm update on Staging'

- script: |
    curl -X POST "https://api.cloudflare.com/client/v4/zones/$CF_ZONE_ID/purge_cache" -H "X-Auth-Email:$CF_EMAIL" -H "X-Auth-Key:$CF_API_KEY" -H "Content-Type:application/json" --data '{"purge_everything":true}'
  condition: succeeded()
  displayName: 'CloudFlare Purge Cache'